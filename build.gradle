apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'pl.allegro.tech.build.axion-release'

group = 'com.scmspain.karyon'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.3.2'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}


configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/ftest/java')
        }
        resources.srcDir file('src/ftest/resources')
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.apache.kafka:kafka_2.10:0.8.2.2'
    compile 'com.netflix.archaius:archaius-core:0.6.3'
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'com.google.inject:guice:3.0'    // This dependency is optional, but we are unable to say this in gradle in an easy way
    compile 'org.reflections:reflections:0.9.9'

    testCompile 'junit:junit:4.12'
    testCompile ('org.powermock:powermock-api-mockito:1.6.2') {
        // this mockito package includes an embedded hamcrest
        exclude group: "org.mockito", module: "mockito-all"
    }
    // mockito without hamcrest embedded
    testCompile "org.mockito:mockito-core:1.10.19"
    // hamcrest and additional matchers
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.hamcrest:hamcrest-generator:1.3'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.assertj:assertj-core:3.4.0'

    testCompile 'com.scmspain.karyon:karyon-rest-router:1.3.0'
    testCompile 'com.netflix.karyon:karyon2-core:2.7.1'
    testCompile 'com.netflix.karyon:karyon2-archaius:2.7.1'
    testCompile 'javax.ws.rs:jsr311-api:1.1.1'

    testCompile ('com.github.charithe:kafka-junit:1.7') {
        exclude group: "org.apache.kafka", module: "kafka_2.11"
        exclude group: "org.slf4j", module: "log4j-over-slf4j"
        exclude group: "org.slf4j", module: "slf4j-api"
    }

}

nexusStaging {
    packageGroup = "com.scmspain" //optional if packageGroup == project.getGroup()
    stagingProfileId = "7dd4d052409ec" //when not defined will be got from server using "packageGroup"
}

test{
    testLogging{
        showStandardStreams = true
    }
}
task functionalTest(type: Test) {
    testLogging{
        showStandardStreams = true
    }
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

modifyPom {
    project {
        name 'com.scmspain.karyon:karyon2-kafka'
        packaging 'jar'
        description 'Karyon Guice Module for handle kafka consumers and producers in a friendly way'
        url 'https://github.com/scm-spain/KafkaClientsModule'

        scm {
            connection 'scm:git@github.com:scm-spain/KafkaClientsModule.git'
            developerConnection 'scm:git@github.com:scm-spain/KafkaClientsModule.git'
            url 'https://github.com/scm-spain/KafkaClientsModule'
        }

        licenses {
            license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'victuxbb'
                name 'Victor Caldentey'
                email 'victor.caldentey@scmspain.com'
                organization 'SCM Spain'
                organizationUrl 'http://www.scmspain.com/'
            }
        }
    }
}

scmVersion {
    ignoreUncommittedChanges = false
}


allprojects {
    //To force version from command line
    //>gradle markNextVersion -Prelease.nextVersion=X.X.X
    project.version = scmVersion.version
}